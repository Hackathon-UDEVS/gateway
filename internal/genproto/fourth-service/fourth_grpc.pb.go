// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: protos/fourth/fourth.proto

package fourth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FourthServiceClient is the client API for FourthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FourthServiceClient interface {
	Test4(ctx context.Context, in *Test4Req, opts ...grpc.CallOption) (*Test4Res, error)
}

type fourthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFourthServiceClient(cc grpc.ClientConnInterface) FourthServiceClient {
	return &fourthServiceClient{cc}
}

func (c *fourthServiceClient) Test4(ctx context.Context, in *Test4Req, opts ...grpc.CallOption) (*Test4Res, error) {
	out := new(Test4Res)
	err := c.cc.Invoke(ctx, "/fourthservice.FourthService/Test4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FourthServiceServer is the server API for FourthService service.
// All implementations must embed UnimplementedFourthServiceServer
// for forward compatibility
type FourthServiceServer interface {
	Test4(context.Context, *Test4Req) (*Test4Res, error)
	mustEmbedUnimplementedFourthServiceServer()
}

// UnimplementedFourthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFourthServiceServer struct {
}

func (UnimplementedFourthServiceServer) Test4(context.Context, *Test4Req) (*Test4Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test4 not implemented")
}
func (UnimplementedFourthServiceServer) mustEmbedUnimplementedFourthServiceServer() {}

// UnsafeFourthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FourthServiceServer will
// result in compilation errors.
type UnsafeFourthServiceServer interface {
	mustEmbedUnimplementedFourthServiceServer()
}

func RegisterFourthServiceServer(s grpc.ServiceRegistrar, srv FourthServiceServer) {
	s.RegisterService(&FourthService_ServiceDesc, srv)
}

func _FourthService_Test4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test4Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FourthServiceServer).Test4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fourthservice.FourthService/Test4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FourthServiceServer).Test4(ctx, req.(*Test4Req))
	}
	return interceptor(ctx, in, info, handler)
}

// FourthService_ServiceDesc is the grpc.ServiceDesc for FourthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FourthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fourthservice.FourthService",
	HandlerType: (*FourthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test4",
			Handler:    _FourthService_Test4_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/fourth/fourth.proto",
}
