// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: protos/third/third.proto

package third_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdServiceClient is the client API for ThirdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdServiceClient interface {
	Test3(ctx context.Context, in *Test3Req, opts ...grpc.CallOption) (*Test3Res, error)
}

type thirdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdServiceClient(cc grpc.ClientConnInterface) ThirdServiceClient {
	return &thirdServiceClient{cc}
}

func (c *thirdServiceClient) Test3(ctx context.Context, in *Test3Req, opts ...grpc.CallOption) (*Test3Res, error) {
	out := new(Test3Res)
	err := c.cc.Invoke(ctx, "/thirdservice.ThirdService/Test3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdServiceServer is the server API for ThirdService service.
// All implementations must embed UnimplementedThirdServiceServer
// for forward compatibility
type ThirdServiceServer interface {
	Test3(context.Context, *Test3Req) (*Test3Res, error)
	mustEmbedUnimplementedThirdServiceServer()
}

// UnimplementedThirdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThirdServiceServer struct {
}

func (UnimplementedThirdServiceServer) Test3(context.Context, *Test3Req) (*Test3Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test3 not implemented")
}
func (UnimplementedThirdServiceServer) mustEmbedUnimplementedThirdServiceServer() {}

// UnsafeThirdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdServiceServer will
// result in compilation errors.
type UnsafeThirdServiceServer interface {
	mustEmbedUnimplementedThirdServiceServer()
}

func RegisterThirdServiceServer(s grpc.ServiceRegistrar, srv ThirdServiceServer) {
	s.RegisterService(&ThirdService_ServiceDesc, srv)
}

func _ThirdService_Test3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Test3Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdServiceServer).Test3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdservice.ThirdService/Test3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdServiceServer).Test3(ctx, req.(*Test3Req))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdService_ServiceDesc is the grpc.ServiceDesc for ThirdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thirdservice.ThirdService",
	HandlerType: (*ThirdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test3",
			Handler:    _ThirdService_Test3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/third/third.proto",
}
