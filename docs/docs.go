// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bids": {
            "get": {
                "description": "Retrieves a list of bids for a tender",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bid"
                ],
                "summary": "Get list of bids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tender ID",
                        "name": "tenderId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of bids retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/tender_service.BidsListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bids/my": {
            "get": {
                "description": "Retrieves all bids made by the authenticated user on various tenders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bid"
                ],
                "summary": "Get list of bids by the current user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of bids retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/tender_service.BidsListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/client/create-tender": {
            "post": {
                "description": "Creates a new tender and returns the created tender data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tender"
                ],
                "summary": "Create a new tender",
                "parameters": [
                    {
                        "description": "Tender creation request",
                        "name": "tender",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tender_service.CreateTenderReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tender created successfully",
                        "schema": {
                            "$ref": "#/definitions/tender_service.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/delete-tender/{id}": {
            "delete": {
                "description": "Deletes a tender by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tender"
                ],
                "summary": "Delete a tender",
                "parameters": [
                    {
                        "description": "Tender deletion request",
                        "name": "tender",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tender_service.DeleteTenderReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tender deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getAll-tenders": {
            "get": {
                "description": "Retrieves a list of tenders for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tender"
                ],
                "summary": "Get tenders",
                "parameters": [
                    {
                        "description": "Query parameters",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tender_service.GetMyTendersReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tenders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/tender_service.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Logs in a user and returns user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login request",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRes"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Registers a new user and returns user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "Register request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterUserRes"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/submit-bid": {
            "post": {
                "description": "Submits a bid for a contractor",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bid"
                ],
                "summary": "Submit a bid",
                "parameters": [
                    {
                        "description": "Bid submission request",
                        "name": "bid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tender_service.SubmitBidRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bid submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/tender_service.BidResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tenders/sort": {
            "get": {
                "description": "Retrieves a sorted list of all tenders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tender"
                ],
                "summary": "Sort tenders",
                "parameters": [
                    {
                        "description": "Query parameters",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tender_service.GetAllTendersReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sorted list of tenders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/tender_service.TendersList"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update-tender": {
            "put": {
                "description": "Updates the status of an existing tender",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tender"
                ],
                "summary": "Update an existing tender",
                "parameters": [
                    {
                        "description": "Tender update request",
                        "name": "tender",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tender_service.UpdateTenderStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tender updated successfully",
                        "schema": {
                            "$ref": "#/definitions/tender_service.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/get-user/{id}": {
            "get": {
                "description": "Retrieves user data by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.GetUserByIDRes"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/getAll-users": {
            "get": {
                "description": "Retrieves a list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "description": "Query parameters",
                        "name": "query",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.GetAllUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.GetAllUserRes"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/update-user/{id}": {
            "put": {
                "description": "Updates user data by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request",
                        "name": "update",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/auth.UpdateUserRes"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.GetAllUserReq": {
            "type": "object",
            "properties": {
                "user_req": {
                    "$ref": "#/definitions/auth.UserModel"
                }
            }
        },
        "auth.GetAllUserRes": {
            "type": "object",
            "properties": {
                "user_res": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/auth.UserModel"
                    }
                }
            }
        },
        "auth.GetUserByIDRes": {
            "type": "object",
            "properties": {
                "user_res": {
                    "$ref": "#/definitions/auth.UserModel"
                }
            }
        },
        "auth.LoginReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginRes": {
            "type": "object",
            "properties": {
                "user_res": {
                    "$ref": "#/definitions/auth.UserModel"
                }
            }
        },
        "auth.RegisterUserReq": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "description": "Must be either 'client' or 'contractors'",
                    "type": "string"
                }
            }
        },
        "auth.RegisterUserRes": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "auth.UpdateUserReq": {
            "type": "object",
            "properties": {
                "user_req": {
                    "$ref": "#/definitions/auth.UserModel"
                }
            }
        },
        "auth.UpdateUserRes": {
            "type": "object",
            "properties": {
                "user_res": {
                    "$ref": "#/definitions/auth.UserModel"
                }
            }
        },
        "auth.UserModel": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "tender_service.Bid": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "contractor_id": {
                    "type": "string"
                },
                "delivery_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "status": {
                    "description": "e.g., \"submitted\", \"accepted\", \"rejected\"",
                    "type": "string"
                },
                "tender_id": {
                    "type": "string"
                }
            }
        },
        "tender_service.BidResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "tender_service.BidsListResponse": {
            "type": "object",
            "properties": {
                "bids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tender_service.Bid"
                    }
                }
            }
        },
        "tender_service.CreateTenderReq": {
            "type": "object",
            "properties": {
                "attachment": {
                    "description": "Optional file URL",
                    "type": "string"
                },
                "budget": {
                    "type": "number"
                },
                "client_id": {
                    "type": "string"
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "tender_service.DeleteTenderReq": {
            "type": "object",
            "properties": {
                "tender_id": {
                    "type": "string"
                }
            }
        },
        "tender_service.GetAllTendersReq": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "tender_service.GetMyTendersReq": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "tender_service.ResponseMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "tender_service.SubmitBidRequest": {
            "type": "object",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "contractor_id": {
                    "type": "string"
                },
                "delivery_time": {
                    "description": "e.g., \"2 weeks\"",
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "tender_id": {
                    "type": "string"
                }
            }
        },
        "tender_service.Tender": {
            "type": "object",
            "properties": {
                "attachment": {
                    "type": "string"
                },
                "budget": {
                    "type": "number"
                },
                "client_id": {
                    "type": "string"
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "tender_service.TendersList": {
            "type": "object",
            "properties": {
                "tenders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tender_service.Tender"
                    }
                }
            }
        },
        "tender_service.UpdateTenderStatusReq": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"open\", \"closed\", \"awarded\"",
                    "type": "string"
                },
                "tender_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8091",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Test API",
	Description:      "Test API with Swagger documentation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
